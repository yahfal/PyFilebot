import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext
)

# –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
def load_config():
    config = {}
    try:
        with open('config.txt', 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (value.startswith('"') and value.endswith('"')) or \
                       (value.startswith("'") and value.endswith("'")):
                        value = value[1:-1]
                    
                    config[key] = value
    except FileNotFoundError:
        print("–§–∞–π–ª config.txt –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
        exit(1)
    
    return config

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()
TOKEN = config.get('TOKEN')
ROOT_PATH = config.get('ROOT_PATH', './files')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç {user.first_name}\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π /browse —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏."
    )

def is_safe_path(base_path, target_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏"""
    base_path = os.path.abspath(base_path)
    target_path = os.path.abspath(target_path)
    return os.path.commonpath([base_path]) == os.path.commonpath([base_path, target_path])

async def browse(update: Update, context: CallbackContext, path: str = None) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    if path is None:
        path = ROOT_PATH
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    if not is_safe_path(ROOT_PATH, path):
        error_msg = "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω!"
        if update.callback_query:
            await update.callback_query.answer(error_msg, show_alert=True)
        else:
            await update.message.reply_text(error_msg)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –≤ user_data
    context.user_data['current_path'] = path
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        entries = os.listdir(path)
        folders = []
        files = []
        
        for entry in entries:
            full_path = os.path.join(path, entry)
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
                if os.path.isdir(full_path):
                    folders.append(entry)
                elif os.path.isfile(full_path):
                    files.append(entry)
            except PermissionError:
                logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É: {full_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {full_path}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–ø–æ–∫
        for folder in sorted(folders):
            keyboard.append([
                InlineKeyboardButton(f"üìÅ {folder}", 
                callback_data=f"folder:{folder}")
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        for file in sorted(files):
            keyboard.append([
                InlineKeyboardButton(f"üìÑ {file}", 
                callback_data=f"file:{file}")
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–µ—Å–ª–∏ –Ω–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ)
        if path != ROOT_PATH:
            parent_path = os.path.dirname(path)
            nav_buttons.append(
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav:back:{parent_path}")
            )
        
        # –ö–Ω–æ–ø–∫–∞ "–î–æ–º–æ–π" (–≤—Å–µ–≥–¥–∞ –∫—Ä–æ–º–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏)
        if path != ROOT_PATH:
            nav_buttons.append(
                InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data=f"nav:home:{ROOT_PATH}")
            )
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {path}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )
            
    except PermissionError:
        error_msg = "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ!"
        if update.callback_query:
            await update.callback_query.answer(error_msg, show_alert=True)
        else:
            await update.message.reply_text(error_msg)
    except FileNotFoundError:
        error_msg = "‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        if update.callback_query:
            await update.callback_query.answer(error_msg, show_alert=True)
        else:
            await update.message.reply_text(error_msg)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        error_msg = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!"
        if update.callback_query:
            await update.callback_query.answer(error_msg, show_alert=True)
        else:
            await update.message.reply_text(error_msg)

async def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    current_path = context.user_data.get('current_path', ROOT_PATH)
    
    if data.startswith("folder:"):
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É
        folder_name = data.split(":", 1)[1]
        new_path = os.path.join(current_path, folder_name)
        await browse(update, context, path=new_path)
    
    elif data.startswith("file:"):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_name = data.split(":", 1)[1]
        file_path = os.path.join(current_path, file_name)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if not is_safe_path(ROOT_PATH, file_path):
                await query.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
                return
            
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=open(file_path, 'rb'),
                filename=file_name
            )
            await query.answer(f"–§–∞–π–ª {file_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except PermissionError:
            await query.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É!", show_alert=True)
        except FileNotFoundError:
            await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)
    
    elif data.startswith("nav:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        action = data.split(":", 2)[1]
        target_path = data.split(":", 2)[2]
        await browse(update, context, path=target_path)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("browse", browse))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(ROOT_PATH):
        os.makedirs(ROOT_PATH)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {ROOT_PATH}")
    
    main()